// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// IScheduler is an autogenerated mock type for the IScheduler type
type IScheduler struct {
	mock.Mock
}

type IScheduler_Expecter struct {
	mock *mock.Mock
}

func (_m *IScheduler) EXPECT() *IScheduler_Expecter {
	return &IScheduler_Expecter{mock: &_m.Mock}
}

// GetSchedulerStatus provides a mock function with no fields
func (_m *IScheduler) GetSchedulerStatus() map[string]interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSchedulerStatus")
	}

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// IScheduler_GetSchedulerStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSchedulerStatus'
type IScheduler_GetSchedulerStatus_Call struct {
	*mock.Call
}

// GetSchedulerStatus is a helper method to define mock.On call
func (_e *IScheduler_Expecter) GetSchedulerStatus() *IScheduler_GetSchedulerStatus_Call {
	return &IScheduler_GetSchedulerStatus_Call{Call: _e.mock.On("GetSchedulerStatus")}
}

func (_c *IScheduler_GetSchedulerStatus_Call) Run(run func()) *IScheduler_GetSchedulerStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IScheduler_GetSchedulerStatus_Call) Return(_a0 map[string]interface{}) *IScheduler_GetSchedulerStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IScheduler_GetSchedulerStatus_Call) RunAndReturn(run func() map[string]interface{}) *IScheduler_GetSchedulerStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with no fields
func (_m *IScheduler) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IScheduler_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type IScheduler_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *IScheduler_Expecter) Start() *IScheduler_Start_Call {
	return &IScheduler_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *IScheduler_Start_Call) Run(run func()) *IScheduler_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IScheduler_Start_Call) Return(_a0 error) *IScheduler_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IScheduler_Start_Call) RunAndReturn(run func() error) *IScheduler_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *IScheduler) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IScheduler_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type IScheduler_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *IScheduler_Expecter) Stop() *IScheduler_Stop_Call {
	return &IScheduler_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *IScheduler_Stop_Call) Run(run func()) *IScheduler_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IScheduler_Stop_Call) Return(_a0 error) *IScheduler_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IScheduler_Stop_Call) RunAndReturn(run func() error) *IScheduler_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// TriggerImmediateJob provides a mock function with given fields: jobID
func (_m *IScheduler) TriggerImmediateJob(jobID string) error {
	ret := _m.Called(jobID)

	if len(ret) == 0 {
		panic("no return value specified for TriggerImmediateJob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(jobID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IScheduler_TriggerImmediateJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TriggerImmediateJob'
type IScheduler_TriggerImmediateJob_Call struct {
	*mock.Call
}

// TriggerImmediateJob is a helper method to define mock.On call
//   - jobID string
func (_e *IScheduler_Expecter) TriggerImmediateJob(jobID interface{}) *IScheduler_TriggerImmediateJob_Call {
	return &IScheduler_TriggerImmediateJob_Call{Call: _e.mock.On("TriggerImmediateJob", jobID)}
}

func (_c *IScheduler_TriggerImmediateJob_Call) Run(run func(jobID string)) *IScheduler_TriggerImmediateJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IScheduler_TriggerImmediateJob_Call) Return(_a0 error) *IScheduler_TriggerImmediateJob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IScheduler_TriggerImmediateJob_Call) RunAndReturn(run func(string) error) *IScheduler_TriggerImmediateJob_Call {
	_c.Call.Return(run)
	return _c
}

// NewIScheduler creates a new instance of IScheduler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIScheduler(t interface {
	mock.TestingT
	Cleanup(func())
}) *IScheduler {
	mock := &IScheduler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
