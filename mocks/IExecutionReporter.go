// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	executor "github.com/fyerfyer/fyer-scheduler/pkg/worker/executor"
	mock "github.com/stretchr/testify/mock"
)

// IExecutionReporter is an autogenerated mock type for the IExecutionReporter type
type IExecutionReporter struct {
	mock.Mock
}

type IExecutionReporter_Expecter struct {
	mock *mock.Mock
}

func (_m *IExecutionReporter) EXPECT() *IExecutionReporter_Expecter {
	return &IExecutionReporter_Expecter{mock: &_m.Mock}
}

// ReportCompletion provides a mock function with given fields: executionID, result
func (_m *IExecutionReporter) ReportCompletion(executionID string, result *executor.ExecutionResult) error {
	ret := _m.Called(executionID, result)

	if len(ret) == 0 {
		panic("no return value specified for ReportCompletion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *executor.ExecutionResult) error); ok {
		r0 = rf(executionID, result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IExecutionReporter_ReportCompletion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReportCompletion'
type IExecutionReporter_ReportCompletion_Call struct {
	*mock.Call
}

// ReportCompletion is a helper method to define mock.On call
//   - executionID string
//   - result *executor.ExecutionResult
func (_e *IExecutionReporter_Expecter) ReportCompletion(executionID interface{}, result interface{}) *IExecutionReporter_ReportCompletion_Call {
	return &IExecutionReporter_ReportCompletion_Call{Call: _e.mock.On("ReportCompletion", executionID, result)}
}

func (_c *IExecutionReporter_ReportCompletion_Call) Run(run func(executionID string, result *executor.ExecutionResult)) *IExecutionReporter_ReportCompletion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*executor.ExecutionResult))
	})
	return _c
}

func (_c *IExecutionReporter_ReportCompletion_Call) Return(_a0 error) *IExecutionReporter_ReportCompletion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IExecutionReporter_ReportCompletion_Call) RunAndReturn(run func(string, *executor.ExecutionResult) error) *IExecutionReporter_ReportCompletion_Call {
	_c.Call.Return(run)
	return _c
}

// ReportError provides a mock function with given fields: executionID, err
func (_m *IExecutionReporter) ReportError(executionID string, err error) error {
	ret := _m.Called(executionID, err)

	if len(ret) == 0 {
		panic("no return value specified for ReportError")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, error) error); ok {
		r0 = rf(executionID, err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IExecutionReporter_ReportError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReportError'
type IExecutionReporter_ReportError_Call struct {
	*mock.Call
}

// ReportError is a helper method to define mock.On call
//   - executionID string
//   - err error
func (_e *IExecutionReporter_Expecter) ReportError(executionID interface{}, err interface{}) *IExecutionReporter_ReportError_Call {
	return &IExecutionReporter_ReportError_Call{Call: _e.mock.On("ReportError", executionID, err)}
}

func (_c *IExecutionReporter_ReportError_Call) Run(run func(executionID string, err error)) *IExecutionReporter_ReportError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(error))
	})
	return _c
}

func (_c *IExecutionReporter_ReportError_Call) Return(_a0 error) *IExecutionReporter_ReportError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IExecutionReporter_ReportError_Call) RunAndReturn(run func(string, error) error) *IExecutionReporter_ReportError_Call {
	_c.Call.Return(run)
	return _c
}

// ReportOutput provides a mock function with given fields: executionID, output
func (_m *IExecutionReporter) ReportOutput(executionID string, output string) error {
	ret := _m.Called(executionID, output)

	if len(ret) == 0 {
		panic("no return value specified for ReportOutput")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(executionID, output)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IExecutionReporter_ReportOutput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReportOutput'
type IExecutionReporter_ReportOutput_Call struct {
	*mock.Call
}

// ReportOutput is a helper method to define mock.On call
//   - executionID string
//   - output string
func (_e *IExecutionReporter_Expecter) ReportOutput(executionID interface{}, output interface{}) *IExecutionReporter_ReportOutput_Call {
	return &IExecutionReporter_ReportOutput_Call{Call: _e.mock.On("ReportOutput", executionID, output)}
}

func (_c *IExecutionReporter_ReportOutput_Call) Run(run func(executionID string, output string)) *IExecutionReporter_ReportOutput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *IExecutionReporter_ReportOutput_Call) Return(_a0 error) *IExecutionReporter_ReportOutput_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IExecutionReporter_ReportOutput_Call) RunAndReturn(run func(string, string) error) *IExecutionReporter_ReportOutput_Call {
	_c.Call.Return(run)
	return _c
}

// ReportProgress provides a mock function with given fields: executionID, status
func (_m *IExecutionReporter) ReportProgress(executionID string, status *executor.ExecutionStatus) error {
	ret := _m.Called(executionID, status)

	if len(ret) == 0 {
		panic("no return value specified for ReportProgress")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *executor.ExecutionStatus) error); ok {
		r0 = rf(executionID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IExecutionReporter_ReportProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReportProgress'
type IExecutionReporter_ReportProgress_Call struct {
	*mock.Call
}

// ReportProgress is a helper method to define mock.On call
//   - executionID string
//   - status *executor.ExecutionStatus
func (_e *IExecutionReporter_Expecter) ReportProgress(executionID interface{}, status interface{}) *IExecutionReporter_ReportProgress_Call {
	return &IExecutionReporter_ReportProgress_Call{Call: _e.mock.On("ReportProgress", executionID, status)}
}

func (_c *IExecutionReporter_ReportProgress_Call) Run(run func(executionID string, status *executor.ExecutionStatus)) *IExecutionReporter_ReportProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*executor.ExecutionStatus))
	})
	return _c
}

func (_c *IExecutionReporter_ReportProgress_Call) Return(_a0 error) *IExecutionReporter_ReportProgress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IExecutionReporter_ReportProgress_Call) RunAndReturn(run func(string, *executor.ExecutionStatus) error) *IExecutionReporter_ReportProgress_Call {
	_c.Call.Return(run)
	return _c
}

// ReportStart provides a mock function with given fields: executionID, pid
func (_m *IExecutionReporter) ReportStart(executionID string, pid int) error {
	ret := _m.Called(executionID, pid)

	if len(ret) == 0 {
		panic("no return value specified for ReportStart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int) error); ok {
		r0 = rf(executionID, pid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IExecutionReporter_ReportStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReportStart'
type IExecutionReporter_ReportStart_Call struct {
	*mock.Call
}

// ReportStart is a helper method to define mock.On call
//   - executionID string
//   - pid int
func (_e *IExecutionReporter_Expecter) ReportStart(executionID interface{}, pid interface{}) *IExecutionReporter_ReportStart_Call {
	return &IExecutionReporter_ReportStart_Call{Call: _e.mock.On("ReportStart", executionID, pid)}
}

func (_c *IExecutionReporter_ReportStart_Call) Run(run func(executionID string, pid int)) *IExecutionReporter_ReportStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int))
	})
	return _c
}

func (_c *IExecutionReporter_ReportStart_Call) Return(_a0 error) *IExecutionReporter_ReportStart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IExecutionReporter_ReportStart_Call) RunAndReturn(run func(string, int) error) *IExecutionReporter_ReportStart_Call {
	_c.Call.Return(run)
	return _c
}

// NewIExecutionReporter creates a new instance of IExecutionReporter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIExecutionReporter(t interface {
	mock.TestingT
	Cleanup(func())
}) *IExecutionReporter {
	mock := &IExecutionReporter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
