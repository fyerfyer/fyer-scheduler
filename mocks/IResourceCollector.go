// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	register "github.com/fyerfyer/fyer-scheduler/pkg/worker/register"
	mock "github.com/stretchr/testify/mock"
)

// IResourceCollector is an autogenerated mock type for the IResourceCollector type
type IResourceCollector struct {
	mock.Mock
}

type IResourceCollector_Expecter struct {
	mock *mock.Mock
}

func (_m *IResourceCollector) EXPECT() *IResourceCollector_Expecter {
	return &IResourceCollector_Expecter{mock: &_m.Mock}
}

// GetResourceInfo provides a mock function with no fields
func (_m *IResourceCollector) GetResourceInfo() register.ResourceInfo {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetResourceInfo")
	}

	var r0 register.ResourceInfo
	if rf, ok := ret.Get(0).(func() register.ResourceInfo); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(register.ResourceInfo)
	}

	return r0
}

// IResourceCollector_GetResourceInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResourceInfo'
type IResourceCollector_GetResourceInfo_Call struct {
	*mock.Call
}

// GetResourceInfo is a helper method to define mock.On call
func (_e *IResourceCollector_Expecter) GetResourceInfo() *IResourceCollector_GetResourceInfo_Call {
	return &IResourceCollector_GetResourceInfo_Call{Call: _e.mock.On("GetResourceInfo")}
}

func (_c *IResourceCollector_GetResourceInfo_Call) Run(run func()) *IResourceCollector_GetResourceInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IResourceCollector_GetResourceInfo_Call) Return(_a0 register.ResourceInfo) *IResourceCollector_GetResourceInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IResourceCollector_GetResourceInfo_Call) RunAndReturn(run func() register.ResourceInfo) *IResourceCollector_GetResourceInfo_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with no fields
func (_m *IResourceCollector) Start() {
	_m.Called()
}

// IResourceCollector_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type IResourceCollector_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *IResourceCollector_Expecter) Start() *IResourceCollector_Start_Call {
	return &IResourceCollector_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *IResourceCollector_Start_Call) Run(run func()) *IResourceCollector_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IResourceCollector_Start_Call) Return() *IResourceCollector_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *IResourceCollector_Start_Call) RunAndReturn(run func()) *IResourceCollector_Start_Call {
	_c.Run(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *IResourceCollector) Stop() {
	_m.Called()
}

// IResourceCollector_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type IResourceCollector_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *IResourceCollector_Expecter) Stop() *IResourceCollector_Stop_Call {
	return &IResourceCollector_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *IResourceCollector_Stop_Call) Run(run func()) *IResourceCollector_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IResourceCollector_Stop_Call) Return() *IResourceCollector_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *IResourceCollector_Stop_Call) RunAndReturn(run func()) *IResourceCollector_Stop_Call {
	_c.Run(run)
	return _c
}

// NewIResourceCollector creates a new instance of IResourceCollector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIResourceCollector(t interface {
	mock.TestingT
	Cleanup(func())
}) *IResourceCollector {
	mock := &IResourceCollector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
