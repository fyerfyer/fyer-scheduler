// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	logsink "github.com/fyerfyer/fyer-scheduler/pkg/worker/logsink"
	mock "github.com/stretchr/testify/mock"
)

// ILogSinkFactory is an autogenerated mock type for the ILogSinkFactory type
type ILogSinkFactory struct {
	mock.Mock
}

type ILogSinkFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *ILogSinkFactory) EXPECT() *ILogSinkFactory_Expecter {
	return &ILogSinkFactory_Expecter{mock: &_m.Mock}
}

// CreateLogSink provides a mock function with given fields: options
func (_m *ILogSinkFactory) CreateLogSink(options ...logsink.LogSinkOption) (logsink.ILogSink, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLogSink")
	}

	var r0 logsink.ILogSink
	var r1 error
	if rf, ok := ret.Get(0).(func(...logsink.LogSinkOption) (logsink.ILogSink, error)); ok {
		return rf(options...)
	}
	if rf, ok := ret.Get(0).(func(...logsink.LogSinkOption) logsink.ILogSink); ok {
		r0 = rf(options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logsink.ILogSink)
		}
	}

	if rf, ok := ret.Get(1).(func(...logsink.LogSinkOption) error); ok {
		r1 = rf(options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ILogSinkFactory_CreateLogSink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLogSink'
type ILogSinkFactory_CreateLogSink_Call struct {
	*mock.Call
}

// CreateLogSink is a helper method to define mock.On call
//   - options ...logsink.LogSinkOption
func (_e *ILogSinkFactory_Expecter) CreateLogSink(options ...interface{}) *ILogSinkFactory_CreateLogSink_Call {
	return &ILogSinkFactory_CreateLogSink_Call{Call: _e.mock.On("CreateLogSink",
		append([]interface{}{}, options...)...)}
}

func (_c *ILogSinkFactory_CreateLogSink_Call) Run(run func(options ...logsink.LogSinkOption)) *ILogSinkFactory_CreateLogSink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]logsink.LogSinkOption, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(logsink.LogSinkOption)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *ILogSinkFactory_CreateLogSink_Call) Return(_a0 logsink.ILogSink, _a1 error) *ILogSinkFactory_CreateLogSink_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ILogSinkFactory_CreateLogSink_Call) RunAndReturn(run func(...logsink.LogSinkOption) (logsink.ILogSink, error)) *ILogSinkFactory_CreateLogSink_Call {
	_c.Call.Return(run)
	return _c
}

// NewILogSinkFactory creates a new instance of ILogSinkFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewILogSinkFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *ILogSinkFactory {
	mock := &ILogSinkFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
