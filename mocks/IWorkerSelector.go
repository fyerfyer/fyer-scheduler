// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	jobmgr "github.com/fyerfyer/fyer-scheduler/pkg/master/jobmgr"
	mock "github.com/stretchr/testify/mock"

	models "github.com/fyerfyer/fyer-scheduler/pkg/common/models"
)

// IWorkerSelector is an autogenerated mock type for the IWorkerSelector type
type IWorkerSelector struct {
	mock.Mock
}

type IWorkerSelector_Expecter struct {
	mock *mock.Mock
}

func (_m *IWorkerSelector) EXPECT() *IWorkerSelector_Expecter {
	return &IWorkerSelector_Expecter{mock: &_m.Mock}
}

// GetStrategy provides a mock function with no fields
func (_m *IWorkerSelector) GetStrategy() jobmgr.SelectionStrategy {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStrategy")
	}

	var r0 jobmgr.SelectionStrategy
	if rf, ok := ret.Get(0).(func() jobmgr.SelectionStrategy); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(jobmgr.SelectionStrategy)
	}

	return r0
}

// IWorkerSelector_GetStrategy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStrategy'
type IWorkerSelector_GetStrategy_Call struct {
	*mock.Call
}

// GetStrategy is a helper method to define mock.On call
func (_e *IWorkerSelector_Expecter) GetStrategy() *IWorkerSelector_GetStrategy_Call {
	return &IWorkerSelector_GetStrategy_Call{Call: _e.mock.On("GetStrategy")}
}

func (_c *IWorkerSelector_GetStrategy_Call) Run(run func()) *IWorkerSelector_GetStrategy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IWorkerSelector_GetStrategy_Call) Return(_a0 jobmgr.SelectionStrategy) *IWorkerSelector_GetStrategy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IWorkerSelector_GetStrategy_Call) RunAndReturn(run func() jobmgr.SelectionStrategy) *IWorkerSelector_GetStrategy_Call {
	_c.Call.Return(run)
	return _c
}

// SelectWorker provides a mock function with given fields: job
func (_m *IWorkerSelector) SelectWorker(job *models.Job) (*models.Worker, error) {
	ret := _m.Called(job)

	if len(ret) == 0 {
		panic("no return value specified for SelectWorker")
	}

	var r0 *models.Worker
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Job) (*models.Worker, error)); ok {
		return rf(job)
	}
	if rf, ok := ret.Get(0).(func(*models.Job) *models.Worker); ok {
		r0 = rf(job)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Worker)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.Job) error); ok {
		r1 = rf(job)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IWorkerSelector_SelectWorker_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectWorker'
type IWorkerSelector_SelectWorker_Call struct {
	*mock.Call
}

// SelectWorker is a helper method to define mock.On call
//   - job *models.Job
func (_e *IWorkerSelector_Expecter) SelectWorker(job interface{}) *IWorkerSelector_SelectWorker_Call {
	return &IWorkerSelector_SelectWorker_Call{Call: _e.mock.On("SelectWorker", job)}
}

func (_c *IWorkerSelector_SelectWorker_Call) Run(run func(job *models.Job)) *IWorkerSelector_SelectWorker_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Job))
	})
	return _c
}

func (_c *IWorkerSelector_SelectWorker_Call) Return(_a0 *models.Worker, _a1 error) *IWorkerSelector_SelectWorker_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IWorkerSelector_SelectWorker_Call) RunAndReturn(run func(*models.Job) (*models.Worker, error)) *IWorkerSelector_SelectWorker_Call {
	_c.Call.Return(run)
	return _c
}

// SelectWorkerWithLabels provides a mock function with given fields: job, requiredLabels
func (_m *IWorkerSelector) SelectWorkerWithLabels(job *models.Job, requiredLabels map[string]string) (*models.Worker, error) {
	ret := _m.Called(job, requiredLabels)

	if len(ret) == 0 {
		panic("no return value specified for SelectWorkerWithLabels")
	}

	var r0 *models.Worker
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Job, map[string]string) (*models.Worker, error)); ok {
		return rf(job, requiredLabels)
	}
	if rf, ok := ret.Get(0).(func(*models.Job, map[string]string) *models.Worker); ok {
		r0 = rf(job, requiredLabels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Worker)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.Job, map[string]string) error); ok {
		r1 = rf(job, requiredLabels)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IWorkerSelector_SelectWorkerWithLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectWorkerWithLabels'
type IWorkerSelector_SelectWorkerWithLabels_Call struct {
	*mock.Call
}

// SelectWorkerWithLabels is a helper method to define mock.On call
//   - job *models.Job
//   - requiredLabels map[string]string
func (_e *IWorkerSelector_Expecter) SelectWorkerWithLabels(job interface{}, requiredLabels interface{}) *IWorkerSelector_SelectWorkerWithLabels_Call {
	return &IWorkerSelector_SelectWorkerWithLabels_Call{Call: _e.mock.On("SelectWorkerWithLabels", job, requiredLabels)}
}

func (_c *IWorkerSelector_SelectWorkerWithLabels_Call) Run(run func(job *models.Job, requiredLabels map[string]string)) *IWorkerSelector_SelectWorkerWithLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Job), args[1].(map[string]string))
	})
	return _c
}

func (_c *IWorkerSelector_SelectWorkerWithLabels_Call) Return(_a0 *models.Worker, _a1 error) *IWorkerSelector_SelectWorkerWithLabels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IWorkerSelector_SelectWorkerWithLabels_Call) RunAndReturn(run func(*models.Job, map[string]string) (*models.Worker, error)) *IWorkerSelector_SelectWorkerWithLabels_Call {
	_c.Call.Return(run)
	return _c
}

// SetStrategy provides a mock function with given fields: strategy
func (_m *IWorkerSelector) SetStrategy(strategy jobmgr.SelectionStrategy) {
	_m.Called(strategy)
}

// IWorkerSelector_SetStrategy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetStrategy'
type IWorkerSelector_SetStrategy_Call struct {
	*mock.Call
}

// SetStrategy is a helper method to define mock.On call
//   - strategy jobmgr.SelectionStrategy
func (_e *IWorkerSelector_Expecter) SetStrategy(strategy interface{}) *IWorkerSelector_SetStrategy_Call {
	return &IWorkerSelector_SetStrategy_Call{Call: _e.mock.On("SetStrategy", strategy)}
}

func (_c *IWorkerSelector_SetStrategy_Call) Run(run func(strategy jobmgr.SelectionStrategy)) *IWorkerSelector_SetStrategy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(jobmgr.SelectionStrategy))
	})
	return _c
}

func (_c *IWorkerSelector_SetStrategy_Call) Return() *IWorkerSelector_SetStrategy_Call {
	_c.Call.Return()
	return _c
}

func (_c *IWorkerSelector_SetStrategy_Call) RunAndReturn(run func(jobmgr.SelectionStrategy)) *IWorkerSelector_SetStrategy_Call {
	_c.Run(run)
	return _c
}

// NewIWorkerSelector creates a new instance of IWorkerSelector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIWorkerSelector(t interface {
	mock.TestingT
	Cleanup(func())
}) *IWorkerSelector {
	mock := &IWorkerSelector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
