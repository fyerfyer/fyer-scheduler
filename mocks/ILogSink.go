// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	logsink "github.com/fyerfyer/fyer-scheduler/pkg/worker/logsink"
	mock "github.com/stretchr/testify/mock"
)

// ILogSink is an autogenerated mock type for the ILogSink type
type ILogSink struct {
	mock.Mock
}

type ILogSink_Expecter struct {
	mock *mock.Mock
}

func (_m *ILogSink) EXPECT() *ILogSink_Expecter {
	return &ILogSink_Expecter{mock: &_m.Mock}
}

// AddLog provides a mock function with given fields: executionID, content
func (_m *ILogSink) AddLog(executionID string, content string) error {
	ret := _m.Called(executionID, content)

	if len(ret) == 0 {
		panic("no return value specified for AddLog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(executionID, content)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ILogSink_AddLog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLog'
type ILogSink_AddLog_Call struct {
	*mock.Call
}

// AddLog is a helper method to define mock.On call
//   - executionID string
//   - content string
func (_e *ILogSink_Expecter) AddLog(executionID interface{}, content interface{}) *ILogSink_AddLog_Call {
	return &ILogSink_AddLog_Call{Call: _e.mock.On("AddLog", executionID, content)}
}

func (_c *ILogSink_AddLog_Call) Run(run func(executionID string, content string)) *ILogSink_AddLog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *ILogSink_AddLog_Call) Return(_a0 error) *ILogSink_AddLog_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ILogSink_AddLog_Call) RunAndReturn(run func(string, string) error) *ILogSink_AddLog_Call {
	_c.Call.Return(run)
	return _c
}

// AddLogEntry provides a mock function with given fields: entry
func (_m *ILogSink) AddLogEntry(entry *logsink.LogEntry) error {
	ret := _m.Called(entry)

	if len(ret) == 0 {
		panic("no return value specified for AddLogEntry")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*logsink.LogEntry) error); ok {
		r0 = rf(entry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ILogSink_AddLogEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLogEntry'
type ILogSink_AddLogEntry_Call struct {
	*mock.Call
}

// AddLogEntry is a helper method to define mock.On call
//   - entry *logsink.LogEntry
func (_e *ILogSink_Expecter) AddLogEntry(entry interface{}) *ILogSink_AddLogEntry_Call {
	return &ILogSink_AddLogEntry_Call{Call: _e.mock.On("AddLogEntry", entry)}
}

func (_c *ILogSink_AddLogEntry_Call) Run(run func(entry *logsink.LogEntry)) *ILogSink_AddLogEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*logsink.LogEntry))
	})
	return _c
}

func (_c *ILogSink_AddLogEntry_Call) Return(_a0 error) *ILogSink_AddLogEntry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ILogSink_AddLogEntry_Call) RunAndReturn(run func(*logsink.LogEntry) error) *ILogSink_AddLogEntry_Call {
	_c.Call.Return(run)
	return _c
}

// AddLogWithLevel provides a mock function with given fields: executionID, content, level
func (_m *ILogSink) AddLogWithLevel(executionID string, content string, level logsink.LogLevel) error {
	ret := _m.Called(executionID, content, level)

	if len(ret) == 0 {
		panic("no return value specified for AddLogWithLevel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, logsink.LogLevel) error); ok {
		r0 = rf(executionID, content, level)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ILogSink_AddLogWithLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLogWithLevel'
type ILogSink_AddLogWithLevel_Call struct {
	*mock.Call
}

// AddLogWithLevel is a helper method to define mock.On call
//   - executionID string
//   - content string
//   - level logsink.LogLevel
func (_e *ILogSink_Expecter) AddLogWithLevel(executionID interface{}, content interface{}, level interface{}) *ILogSink_AddLogWithLevel_Call {
	return &ILogSink_AddLogWithLevel_Call{Call: _e.mock.On("AddLogWithLevel", executionID, content, level)}
}

func (_c *ILogSink_AddLogWithLevel_Call) Run(run func(executionID string, content string, level logsink.LogLevel)) *ILogSink_AddLogWithLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(logsink.LogLevel))
	})
	return _c
}

func (_c *ILogSink_AddLogWithLevel_Call) Return(_a0 error) *ILogSink_AddLogWithLevel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ILogSink_AddLogWithLevel_Call) RunAndReturn(run func(string, string, logsink.LogLevel) error) *ILogSink_AddLogWithLevel_Call {
	_c.Call.Return(run)
	return _c
}

// Flush provides a mock function with no fields
func (_m *ILogSink) Flush() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Flush")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ILogSink_Flush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Flush'
type ILogSink_Flush_Call struct {
	*mock.Call
}

// Flush is a helper method to define mock.On call
func (_e *ILogSink_Expecter) Flush() *ILogSink_Flush_Call {
	return &ILogSink_Flush_Call{Call: _e.mock.On("Flush")}
}

func (_c *ILogSink_Flush_Call) Run(run func()) *ILogSink_Flush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ILogSink_Flush_Call) Return(_a0 error) *ILogSink_Flush_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ILogSink_Flush_Call) RunAndReturn(run func() error) *ILogSink_Flush_Call {
	_c.Call.Return(run)
	return _c
}

// FlushExecutionLogs provides a mock function with given fields: executionID
func (_m *ILogSink) FlushExecutionLogs(executionID string) error {
	ret := _m.Called(executionID)

	if len(ret) == 0 {
		panic("no return value specified for FlushExecutionLogs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(executionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ILogSink_FlushExecutionLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FlushExecutionLogs'
type ILogSink_FlushExecutionLogs_Call struct {
	*mock.Call
}

// FlushExecutionLogs is a helper method to define mock.On call
//   - executionID string
func (_e *ILogSink_Expecter) FlushExecutionLogs(executionID interface{}) *ILogSink_FlushExecutionLogs_Call {
	return &ILogSink_FlushExecutionLogs_Call{Call: _e.mock.On("FlushExecutionLogs", executionID)}
}

func (_c *ILogSink_FlushExecutionLogs_Call) Run(run func(executionID string)) *ILogSink_FlushExecutionLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ILogSink_FlushExecutionLogs_Call) Return(_a0 error) *ILogSink_FlushExecutionLogs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ILogSink_FlushExecutionLogs_Call) RunAndReturn(run func(string) error) *ILogSink_FlushExecutionLogs_Call {
	_c.Call.Return(run)
	return _c
}

// GetStats provides a mock function with no fields
func (_m *ILogSink) GetStats() map[string]interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStats")
	}

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// ILogSink_GetStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStats'
type ILogSink_GetStats_Call struct {
	*mock.Call
}

// GetStats is a helper method to define mock.On call
func (_e *ILogSink_Expecter) GetStats() *ILogSink_GetStats_Call {
	return &ILogSink_GetStats_Call{Call: _e.mock.On("GetStats")}
}

func (_c *ILogSink_GetStats_Call) Run(run func()) *ILogSink_GetStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ILogSink_GetStats_Call) Return(_a0 map[string]interface{}) *ILogSink_GetStats_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ILogSink_GetStats_Call) RunAndReturn(run func() map[string]interface{}) *ILogSink_GetStats_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterExecutionJob provides a mock function with given fields: executionID, jobID
func (_m *ILogSink) RegisterExecutionJob(executionID string, jobID string) {
	_m.Called(executionID, jobID)
}

// ILogSink_RegisterExecutionJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterExecutionJob'
type ILogSink_RegisterExecutionJob_Call struct {
	*mock.Call
}

// RegisterExecutionJob is a helper method to define mock.On call
//   - executionID string
//   - jobID string
func (_e *ILogSink_Expecter) RegisterExecutionJob(executionID interface{}, jobID interface{}) *ILogSink_RegisterExecutionJob_Call {
	return &ILogSink_RegisterExecutionJob_Call{Call: _e.mock.On("RegisterExecutionJob", executionID, jobID)}
}

func (_c *ILogSink_RegisterExecutionJob_Call) Run(run func(executionID string, jobID string)) *ILogSink_RegisterExecutionJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *ILogSink_RegisterExecutionJob_Call) Return() *ILogSink_RegisterExecutionJob_Call {
	_c.Call.Return()
	return _c
}

func (_c *ILogSink_RegisterExecutionJob_Call) RunAndReturn(run func(string, string)) *ILogSink_RegisterExecutionJob_Call {
	_c.Run(run)
	return _c
}

// SetSendMode provides a mock function with given fields: mode
func (_m *ILogSink) SetSendMode(mode logsink.LogSendMode) {
	_m.Called(mode)
}

// ILogSink_SetSendMode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSendMode'
type ILogSink_SetSendMode_Call struct {
	*mock.Call
}

// SetSendMode is a helper method to define mock.On call
//   - mode logsink.LogSendMode
func (_e *ILogSink_Expecter) SetSendMode(mode interface{}) *ILogSink_SetSendMode_Call {
	return &ILogSink_SetSendMode_Call{Call: _e.mock.On("SetSendMode", mode)}
}

func (_c *ILogSink_SetSendMode_Call) Run(run func(mode logsink.LogSendMode)) *ILogSink_SetSendMode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(logsink.LogSendMode))
	})
	return _c
}

func (_c *ILogSink_SetSendMode_Call) Return() *ILogSink_SetSendMode_Call {
	_c.Call.Return()
	return _c
}

func (_c *ILogSink_SetSendMode_Call) RunAndReturn(run func(logsink.LogSendMode)) *ILogSink_SetSendMode_Call {
	_c.Run(run)
	return _c
}

// SetStorageType provides a mock function with given fields: storageType
func (_m *ILogSink) SetStorageType(storageType logsink.LogStorageType) {
	_m.Called(storageType)
}

// ILogSink_SetStorageType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetStorageType'
type ILogSink_SetStorageType_Call struct {
	*mock.Call
}

// SetStorageType is a helper method to define mock.On call
//   - storageType logsink.LogStorageType
func (_e *ILogSink_Expecter) SetStorageType(storageType interface{}) *ILogSink_SetStorageType_Call {
	return &ILogSink_SetStorageType_Call{Call: _e.mock.On("SetStorageType", storageType)}
}

func (_c *ILogSink_SetStorageType_Call) Run(run func(storageType logsink.LogStorageType)) *ILogSink_SetStorageType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(logsink.LogStorageType))
	})
	return _c
}

func (_c *ILogSink_SetStorageType_Call) Return() *ILogSink_SetStorageType_Call {
	_c.Call.Return()
	return _c
}

func (_c *ILogSink_SetStorageType_Call) RunAndReturn(run func(logsink.LogStorageType)) *ILogSink_SetStorageType_Call {
	_c.Run(run)
	return _c
}

// Start provides a mock function with no fields
func (_m *ILogSink) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ILogSink_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type ILogSink_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *ILogSink_Expecter) Start() *ILogSink_Start_Call {
	return &ILogSink_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *ILogSink_Start_Call) Run(run func()) *ILogSink_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ILogSink_Start_Call) Return(_a0 error) *ILogSink_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ILogSink_Start_Call) RunAndReturn(run func() error) *ILogSink_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *ILogSink) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ILogSink_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type ILogSink_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *ILogSink_Expecter) Stop() *ILogSink_Stop_Call {
	return &ILogSink_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *ILogSink_Stop_Call) Run(run func()) *ILogSink_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ILogSink_Stop_Call) Return(_a0 error) *ILogSink_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ILogSink_Stop_Call) RunAndReturn(run func() error) *ILogSink_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewILogSink creates a new instance of ILogSink. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewILogSink(t interface {
	mock.TestingT
	Cleanup(func())
}) *ILogSink {
	mock := &ILogSink{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
