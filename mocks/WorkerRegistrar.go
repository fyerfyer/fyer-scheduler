// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	clientv3 "go.etcd.io/etcd/client/v3"

	models "github.com/fyerfyer/fyer-scheduler/pkg/common/models"
)

// WorkerRegistrar is an autogenerated mock type for the WorkerRegistrar type
type WorkerRegistrar struct {
	mock.Mock
}

type WorkerRegistrar_Expecter struct {
	mock *mock.Mock
}

func (_m *WorkerRegistrar) EXPECT() *WorkerRegistrar_Expecter {
	return &WorkerRegistrar_Expecter{mock: &_m.Mock}
}

// GetWorker provides a mock function with no fields
func (_m *WorkerRegistrar) GetWorker() *models.Worker {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWorker")
	}

	var r0 *models.Worker
	if rf, ok := ret.Get(0).(func() *models.Worker); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Worker)
		}
	}

	return r0
}

// WorkerRegistrar_GetWorker_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorker'
type WorkerRegistrar_GetWorker_Call struct {
	*mock.Call
}

// GetWorker is a helper method to define mock.On call
func (_e *WorkerRegistrar_Expecter) GetWorker() *WorkerRegistrar_GetWorker_Call {
	return &WorkerRegistrar_GetWorker_Call{Call: _e.mock.On("GetWorker")}
}

func (_c *WorkerRegistrar_GetWorker_Call) Run(run func()) *WorkerRegistrar_GetWorker_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *WorkerRegistrar_GetWorker_Call) Return(_a0 *models.Worker) *WorkerRegistrar_GetWorker_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WorkerRegistrar_GetWorker_Call) RunAndReturn(run func() *models.Worker) *WorkerRegistrar_GetWorker_Call {
	_c.Call.Return(run)
	return _c
}

// Heartbeat provides a mock function with no fields
func (_m *WorkerRegistrar) Heartbeat() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Heartbeat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WorkerRegistrar_Heartbeat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Heartbeat'
type WorkerRegistrar_Heartbeat_Call struct {
	*mock.Call
}

// Heartbeat is a helper method to define mock.On call
func (_e *WorkerRegistrar_Expecter) Heartbeat() *WorkerRegistrar_Heartbeat_Call {
	return &WorkerRegistrar_Heartbeat_Call{Call: _e.mock.On("Heartbeat")}
}

func (_c *WorkerRegistrar_Heartbeat_Call) Run(run func()) *WorkerRegistrar_Heartbeat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *WorkerRegistrar_Heartbeat_Call) Return(_a0 error) *WorkerRegistrar_Heartbeat_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WorkerRegistrar_Heartbeat_Call) RunAndReturn(run func() error) *WorkerRegistrar_Heartbeat_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with no fields
func (_m *WorkerRegistrar) Register() (clientv3.LeaseID, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 clientv3.LeaseID
	var r1 error
	if rf, ok := ret.Get(0).(func() (clientv3.LeaseID, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() clientv3.LeaseID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(clientv3.LeaseID)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WorkerRegistrar_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type WorkerRegistrar_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
func (_e *WorkerRegistrar_Expecter) Register() *WorkerRegistrar_Register_Call {
	return &WorkerRegistrar_Register_Call{Call: _e.mock.On("Register")}
}

func (_c *WorkerRegistrar_Register_Call) Run(run func()) *WorkerRegistrar_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *WorkerRegistrar_Register_Call) Return(_a0 clientv3.LeaseID, _a1 error) *WorkerRegistrar_Register_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WorkerRegistrar_Register_Call) RunAndReturn(run func() (clientv3.LeaseID, error)) *WorkerRegistrar_Register_Call {
	_c.Call.Return(run)
	return _c
}

// SetStatus provides a mock function with given fields: status
func (_m *WorkerRegistrar) SetStatus(status string) error {
	ret := _m.Called(status)

	if len(ret) == 0 {
		panic("no return value specified for SetStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WorkerRegistrar_SetStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetStatus'
type WorkerRegistrar_SetStatus_Call struct {
	*mock.Call
}

// SetStatus is a helper method to define mock.On call
//   - status string
func (_e *WorkerRegistrar_Expecter) SetStatus(status interface{}) *WorkerRegistrar_SetStatus_Call {
	return &WorkerRegistrar_SetStatus_Call{Call: _e.mock.On("SetStatus", status)}
}

func (_c *WorkerRegistrar_SetStatus_Call) Run(run func(status string)) *WorkerRegistrar_SetStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *WorkerRegistrar_SetStatus_Call) Return(_a0 error) *WorkerRegistrar_SetStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WorkerRegistrar_SetStatus_Call) RunAndReturn(run func(string) error) *WorkerRegistrar_SetStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with no fields
func (_m *WorkerRegistrar) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WorkerRegistrar_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type WorkerRegistrar_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *WorkerRegistrar_Expecter) Start() *WorkerRegistrar_Start_Call {
	return &WorkerRegistrar_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *WorkerRegistrar_Start_Call) Run(run func()) *WorkerRegistrar_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *WorkerRegistrar_Start_Call) Return(_a0 error) *WorkerRegistrar_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WorkerRegistrar_Start_Call) RunAndReturn(run func() error) *WorkerRegistrar_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *WorkerRegistrar) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WorkerRegistrar_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type WorkerRegistrar_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *WorkerRegistrar_Expecter) Stop() *WorkerRegistrar_Stop_Call {
	return &WorkerRegistrar_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *WorkerRegistrar_Stop_Call) Run(run func()) *WorkerRegistrar_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *WorkerRegistrar_Stop_Call) Return(_a0 error) *WorkerRegistrar_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WorkerRegistrar_Stop_Call) RunAndReturn(run func() error) *WorkerRegistrar_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateResources provides a mock function with no fields
func (_m *WorkerRegistrar) UpdateResources() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UpdateResources")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WorkerRegistrar_UpdateResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateResources'
type WorkerRegistrar_UpdateResources_Call struct {
	*mock.Call
}

// UpdateResources is a helper method to define mock.On call
func (_e *WorkerRegistrar_Expecter) UpdateResources() *WorkerRegistrar_UpdateResources_Call {
	return &WorkerRegistrar_UpdateResources_Call{Call: _e.mock.On("UpdateResources")}
}

func (_c *WorkerRegistrar_UpdateResources_Call) Run(run func()) *WorkerRegistrar_UpdateResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *WorkerRegistrar_UpdateResources_Call) Return(_a0 error) *WorkerRegistrar_UpdateResources_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WorkerRegistrar_UpdateResources_Call) RunAndReturn(run func() error) *WorkerRegistrar_UpdateResources_Call {
	_c.Call.Return(run)
	return _c
}

// NewWorkerRegistrar creates a new instance of WorkerRegistrar. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWorkerRegistrar(t interface {
	mock.TestingT
	Cleanup(func())
}) *WorkerRegistrar {
	mock := &WorkerRegistrar{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
