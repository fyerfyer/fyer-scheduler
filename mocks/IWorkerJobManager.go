// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	jobmgr "github.com/fyerfyer/fyer-scheduler/pkg/worker/jobmgr"
	mock "github.com/stretchr/testify/mock"

	models "github.com/fyerfyer/fyer-scheduler/pkg/common/models"
)

// IWorkerJobManager is an autogenerated mock type for the IWorkerJobManager type
type IWorkerJobManager struct {
	mock.Mock
}

type IWorkerJobManager_Expecter struct {
	mock *mock.Mock
}

func (_m *IWorkerJobManager) EXPECT() *IWorkerJobManager_Expecter {
	return &IWorkerJobManager_Expecter{mock: &_m.Mock}
}

// GetJob provides a mock function with given fields: jobID
func (_m *IWorkerJobManager) GetJob(jobID string) (*models.Job, error) {
	ret := _m.Called(jobID)

	if len(ret) == 0 {
		panic("no return value specified for GetJob")
	}

	var r0 *models.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Job, error)); ok {
		return rf(jobID)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Job); ok {
		r0 = rf(jobID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(jobID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IWorkerJobManager_GetJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJob'
type IWorkerJobManager_GetJob_Call struct {
	*mock.Call
}

// GetJob is a helper method to define mock.On call
//   - jobID string
func (_e *IWorkerJobManager_Expecter) GetJob(jobID interface{}) *IWorkerJobManager_GetJob_Call {
	return &IWorkerJobManager_GetJob_Call{Call: _e.mock.On("GetJob", jobID)}
}

func (_c *IWorkerJobManager_GetJob_Call) Run(run func(jobID string)) *IWorkerJobManager_GetJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IWorkerJobManager_GetJob_Call) Return(_a0 *models.Job, _a1 error) *IWorkerJobManager_GetJob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IWorkerJobManager_GetJob_Call) RunAndReturn(run func(string) (*models.Job, error)) *IWorkerJobManager_GetJob_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkerID provides a mock function with no fields
func (_m *IWorkerJobManager) GetWorkerID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWorkerID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IWorkerJobManager_GetWorkerID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkerID'
type IWorkerJobManager_GetWorkerID_Call struct {
	*mock.Call
}

// GetWorkerID is a helper method to define mock.On call
func (_e *IWorkerJobManager_Expecter) GetWorkerID() *IWorkerJobManager_GetWorkerID_Call {
	return &IWorkerJobManager_GetWorkerID_Call{Call: _e.mock.On("GetWorkerID")}
}

func (_c *IWorkerJobManager_GetWorkerID_Call) Run(run func()) *IWorkerJobManager_GetWorkerID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IWorkerJobManager_GetWorkerID_Call) Return(_a0 string) *IWorkerJobManager_GetWorkerID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IWorkerJobManager_GetWorkerID_Call) RunAndReturn(run func() string) *IWorkerJobManager_GetWorkerID_Call {
	_c.Call.Return(run)
	return _c
}

// IsJobAssignedToWorker provides a mock function with given fields: job
func (_m *IWorkerJobManager) IsJobAssignedToWorker(job *models.Job) bool {
	ret := _m.Called(job)

	if len(ret) == 0 {
		panic("no return value specified for IsJobAssignedToWorker")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*models.Job) bool); ok {
		r0 = rf(job)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IWorkerJobManager_IsJobAssignedToWorker_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsJobAssignedToWorker'
type IWorkerJobManager_IsJobAssignedToWorker_Call struct {
	*mock.Call
}

// IsJobAssignedToWorker is a helper method to define mock.On call
//   - job *models.Job
func (_e *IWorkerJobManager_Expecter) IsJobAssignedToWorker(job interface{}) *IWorkerJobManager_IsJobAssignedToWorker_Call {
	return &IWorkerJobManager_IsJobAssignedToWorker_Call{Call: _e.mock.On("IsJobAssignedToWorker", job)}
}

func (_c *IWorkerJobManager_IsJobAssignedToWorker_Call) Run(run func(job *models.Job)) *IWorkerJobManager_IsJobAssignedToWorker_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Job))
	})
	return _c
}

func (_c *IWorkerJobManager_IsJobAssignedToWorker_Call) Return(_a0 bool) *IWorkerJobManager_IsJobAssignedToWorker_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IWorkerJobManager_IsJobAssignedToWorker_Call) RunAndReturn(run func(*models.Job) bool) *IWorkerJobManager_IsJobAssignedToWorker_Call {
	_c.Call.Return(run)
	return _c
}

// KillJob provides a mock function with given fields: jobID
func (_m *IWorkerJobManager) KillJob(jobID string) error {
	ret := _m.Called(jobID)

	if len(ret) == 0 {
		panic("no return value specified for KillJob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(jobID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IWorkerJobManager_KillJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KillJob'
type IWorkerJobManager_KillJob_Call struct {
	*mock.Call
}

// KillJob is a helper method to define mock.On call
//   - jobID string
func (_e *IWorkerJobManager_Expecter) KillJob(jobID interface{}) *IWorkerJobManager_KillJob_Call {
	return &IWorkerJobManager_KillJob_Call{Call: _e.mock.On("KillJob", jobID)}
}

func (_c *IWorkerJobManager_KillJob_Call) Run(run func(jobID string)) *IWorkerJobManager_KillJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IWorkerJobManager_KillJob_Call) Return(_a0 error) *IWorkerJobManager_KillJob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IWorkerJobManager_KillJob_Call) RunAndReturn(run func(string) error) *IWorkerJobManager_KillJob_Call {
	_c.Call.Return(run)
	return _c
}

// ListJobs provides a mock function with no fields
func (_m *IWorkerJobManager) ListJobs() ([]*models.Job, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListJobs")
	}

	var r0 []*models.Job
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*models.Job, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*models.Job); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Job)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IWorkerJobManager_ListJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListJobs'
type IWorkerJobManager_ListJobs_Call struct {
	*mock.Call
}

// ListJobs is a helper method to define mock.On call
func (_e *IWorkerJobManager_Expecter) ListJobs() *IWorkerJobManager_ListJobs_Call {
	return &IWorkerJobManager_ListJobs_Call{Call: _e.mock.On("ListJobs")}
}

func (_c *IWorkerJobManager_ListJobs_Call) Run(run func()) *IWorkerJobManager_ListJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IWorkerJobManager_ListJobs_Call) Return(_a0 []*models.Job, _a1 error) *IWorkerJobManager_ListJobs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IWorkerJobManager_ListJobs_Call) RunAndReturn(run func() ([]*models.Job, error)) *IWorkerJobManager_ListJobs_Call {
	_c.Call.Return(run)
	return _c
}

// ListRunningJobs provides a mock function with no fields
func (_m *IWorkerJobManager) ListRunningJobs() ([]*models.Job, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListRunningJobs")
	}

	var r0 []*models.Job
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*models.Job, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*models.Job); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Job)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IWorkerJobManager_ListRunningJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRunningJobs'
type IWorkerJobManager_ListRunningJobs_Call struct {
	*mock.Call
}

// ListRunningJobs is a helper method to define mock.On call
func (_e *IWorkerJobManager_Expecter) ListRunningJobs() *IWorkerJobManager_ListRunningJobs_Call {
	return &IWorkerJobManager_ListRunningJobs_Call{Call: _e.mock.On("ListRunningJobs")}
}

func (_c *IWorkerJobManager_ListRunningJobs_Call) Run(run func()) *IWorkerJobManager_ListRunningJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IWorkerJobManager_ListRunningJobs_Call) Return(_a0 []*models.Job, _a1 error) *IWorkerJobManager_ListRunningJobs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IWorkerJobManager_ListRunningJobs_Call) RunAndReturn(run func() ([]*models.Job, error)) *IWorkerJobManager_ListRunningJobs_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterHandler provides a mock function with given fields: handler
func (_m *IWorkerJobManager) RegisterHandler(handler jobmgr.IJobEventHandler) {
	_m.Called(handler)
}

// IWorkerJobManager_RegisterHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterHandler'
type IWorkerJobManager_RegisterHandler_Call struct {
	*mock.Call
}

// RegisterHandler is a helper method to define mock.On call
//   - handler jobmgr.IJobEventHandler
func (_e *IWorkerJobManager_Expecter) RegisterHandler(handler interface{}) *IWorkerJobManager_RegisterHandler_Call {
	return &IWorkerJobManager_RegisterHandler_Call{Call: _e.mock.On("RegisterHandler", handler)}
}

func (_c *IWorkerJobManager_RegisterHandler_Call) Run(run func(handler jobmgr.IJobEventHandler)) *IWorkerJobManager_RegisterHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(jobmgr.IJobEventHandler))
	})
	return _c
}

func (_c *IWorkerJobManager_RegisterHandler_Call) Return() *IWorkerJobManager_RegisterHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *IWorkerJobManager_RegisterHandler_Call) RunAndReturn(run func(jobmgr.IJobEventHandler)) *IWorkerJobManager_RegisterHandler_Call {
	_c.Run(run)
	return _c
}

// ReportJobStatus provides a mock function with given fields: job, status
func (_m *IWorkerJobManager) ReportJobStatus(job *models.Job, status string) error {
	ret := _m.Called(job, status)

	if len(ret) == 0 {
		panic("no return value specified for ReportJobStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Job, string) error); ok {
		r0 = rf(job, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IWorkerJobManager_ReportJobStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReportJobStatus'
type IWorkerJobManager_ReportJobStatus_Call struct {
	*mock.Call
}

// ReportJobStatus is a helper method to define mock.On call
//   - job *models.Job
//   - status string
func (_e *IWorkerJobManager_Expecter) ReportJobStatus(job interface{}, status interface{}) *IWorkerJobManager_ReportJobStatus_Call {
	return &IWorkerJobManager_ReportJobStatus_Call{Call: _e.mock.On("ReportJobStatus", job, status)}
}

func (_c *IWorkerJobManager_ReportJobStatus_Call) Run(run func(job *models.Job, status string)) *IWorkerJobManager_ReportJobStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Job), args[1].(string))
	})
	return _c
}

func (_c *IWorkerJobManager_ReportJobStatus_Call) Return(_a0 error) *IWorkerJobManager_ReportJobStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IWorkerJobManager_ReportJobStatus_Call) RunAndReturn(run func(*models.Job, string) error) *IWorkerJobManager_ReportJobStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with no fields
func (_m *IWorkerJobManager) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IWorkerJobManager_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type IWorkerJobManager_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *IWorkerJobManager_Expecter) Start() *IWorkerJobManager_Start_Call {
	return &IWorkerJobManager_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *IWorkerJobManager_Start_Call) Run(run func()) *IWorkerJobManager_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IWorkerJobManager_Start_Call) Return(_a0 error) *IWorkerJobManager_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IWorkerJobManager_Start_Call) RunAndReturn(run func() error) *IWorkerJobManager_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *IWorkerJobManager) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IWorkerJobManager_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type IWorkerJobManager_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *IWorkerJobManager_Expecter) Stop() *IWorkerJobManager_Stop_Call {
	return &IWorkerJobManager_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *IWorkerJobManager_Stop_Call) Run(run func()) *IWorkerJobManager_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IWorkerJobManager_Stop_Call) Return(_a0 error) *IWorkerJobManager_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IWorkerJobManager_Stop_Call) RunAndReturn(run func() error) *IWorkerJobManager_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// WatchJobs provides a mock function with no fields
func (_m *IWorkerJobManager) WatchJobs() {
	_m.Called()
}

// IWorkerJobManager_WatchJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchJobs'
type IWorkerJobManager_WatchJobs_Call struct {
	*mock.Call
}

// WatchJobs is a helper method to define mock.On call
func (_e *IWorkerJobManager_Expecter) WatchJobs() *IWorkerJobManager_WatchJobs_Call {
	return &IWorkerJobManager_WatchJobs_Call{Call: _e.mock.On("WatchJobs")}
}

func (_c *IWorkerJobManager_WatchJobs_Call) Run(run func()) *IWorkerJobManager_WatchJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IWorkerJobManager_WatchJobs_Call) Return() *IWorkerJobManager_WatchJobs_Call {
	_c.Call.Return()
	return _c
}

func (_c *IWorkerJobManager_WatchJobs_Call) RunAndReturn(run func()) *IWorkerJobManager_WatchJobs_Call {
	_c.Run(run)
	return _c
}

// NewIWorkerJobManager creates a new instance of IWorkerJobManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIWorkerJobManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *IWorkerJobManager {
	mock := &IWorkerJobManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
